(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{62:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return l}));var r=n(1),a=n(6),c=(n(0),n(86)),o={title:"Data Structures"},s={unversionedId:"docs-data_structures",id:"docs-data_structures",isDocsHomePage:!1,title:"Data Structures",description:"List",source:"@site/docs/docs-data_structures.md",slug:"/docs-data_structures",permalink:"/docs/docs-data_structures",editUrl:"https://github.com/tony-lang/tony-lang.github.io/edit/master/docs/docs-data_structures.md",version:"current",sidebar:"docs",previous:{title:"Literals",permalink:"/docs/docs-literals"},next:{title:"List Comprehensions",permalink:"/docs/docs-list_comprehensions"}},i=[{value:"List",id:"list",children:[]},{value:"Tuple",id:"tuple",children:[]},{value:"Map",id:"map",children:[]},{value:"Struct",id:"struct",children:[]},{value:"Spread operator",id:"spread-operator",children:[]},{value:"Access operator",id:"access-operator",children:[]}],p={rightToc:i};function l(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"list"},"List"),Object(c.b)("p",null,"A list is a sequence of values of the same type."),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tn"}),"[]\n[1, 2, 3]\n['hello', 'world']\n")),Object(c.b)("h2",{id:"tuple"},"Tuple"),Object(c.b)("p",null,"A tuple is a sequence of values of different types. A tuple must always contain at least two elements."),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tn"}),"name := 'Tony'\nage := 86\n\n(name, age)\n")),Object(c.b)("h2",{id:"map"},"Map"),Object(c.b)("p",null,"A map is a mapping from keys of some type to values of another type."),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tn"}),"{ 'a' -> 1, 'b' -> 2 }\n\n# Shorthand pair identifier\na := 1\nb := 2\n{ a, b } # is the same as { 'a' -> 1, 'b' -> 2 }\n")),Object(c.b)("h2",{id:"struct"},"Struct"),Object(c.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(c.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-heading"}),Object(c.b)("h5",{parentName:"div"},Object(c.b)("span",Object(r.a)({parentName:"h5"},{className:"admonition-icon"}),Object(c.b)("svg",Object(r.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(c.b)("path",Object(r.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"Not implemented yet")),Object(c.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-content"}))),Object(c.b)("p",null,"A struct is a mapping from keys of type String to values of different types."),Object(c.b)("h2",{id:"spread-operator"},"Spread operator"),Object(c.b)("p",null,"The spread operator ",Object(c.b)("inlineCode",{parentName:"p"},"...")," can be used to merge two data structures of the same type:"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tn"}),"# returns [1, 2, 3, 4, 5]\n[1, 2, ...[3, 4, 5]]\n\n# returns ('Tony', 86, 'Cambridge', 'Computer Science')\n('Tony', 86, ...('Cambridge', 'Computer Science'))\n\n# returns {'a' -> 1, 'b' -> 3, 'c' -> 4}\n{ 'a' -> 1, 'b' -> 2, ...{ 'b' -> 3, 'c' -> 4 } }\n")),Object(c.b)("h2",{id:"access-operator"},"Access operator"),Object(c.b)("p",null,"To access data in complex data structures, Tony comes with the access operator ",Object(c.b)("inlineCode",{parentName:"p"},"->"),"."),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tn"}),"# returns 1\n[1, 2, 3]->0\n\n# returns 2\n{ 'a' -> 1, 'b' -> 2 }->b\n")),Object(c.b)("p",null,"To evaluate an expression returning the index/key that is accessed, the expression has to be wrapped in square brackets:"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tn"}),"# returns 3\nindex := 2\n[1, 2, 3]->[index]\n\n# returns 1\n{ 'a' -> 1, 'b' -> 2 }->['a']\n")))}l.isMDXComponent=!0},86:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),l=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),d=r,m=u["".concat(o,".").concat(d)]||u[d]||b[d]||c;return n?a.a.createElement(m,s(s({ref:t},p),{},{components:n})):a.a.createElement(m,s({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,o=new Array(c);o[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<c;p++)o[p]=n[p];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);